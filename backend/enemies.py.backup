"""Enemy classes for the tower defense game"""
from typing import Dict, Any


class Enemy:
    """Base enemy class"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        self.enemy_id = enemy_id
        self.x = 0
        self.y = 250
        self.enemy_type = "basic"
        self.hp = 50 + (wave_number * 10)
        self.max_hp = 50 + (wave_number * 10)
        self.speed = 1.0 + (wave_number * 0.05)
        self.reward = 25 + (wave_number * 5)
        self.armor = 0
        self.is_flying = False
        self.path_index = 0
        self.path = [
            (0, 250), (200, 250), (200, 100), (400, 100),
            (400, 300), (600, 300), (600, 150), (800, 150)
        ]
        
    def to_dict(self) -> Dict[str, Any]:
        """Convert enemy to dictionary for JSON serialization"""
        return {
            "id": self.enemy_id,
            "x": self.x,
            "y": self.y,
            "type": self.enemy_type,
            "health": self.hp,
            "max_health": self.max_hp,
            "speed": self.speed,
            "reward": self.reward,
            "armor": self.armor,
            "flying": self.is_flying
        }
    
    def take_damage(self, damage: int):
        """Apply damage to enemy considering armor"""
        actual_damage = max(1, damage - self.armor)
        self.hp -= actual_damage
            "armor": self.armor,
            "flying": self.flying,
        }
    
    def take_damage(self, damage: int) -> bool:
        """Apply damage to enemy, returns True if enemy died"""
        actual_damage = max(1, damage - self.armor)
        self.health -= actual_damage
        return self.health <= 0


class BasicEnemy(Enemy):
    """Standard enemy with balanced stats"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        super().__init__(enemy_id, wave_number)
        self.type = "basic"
        self.health = 50 + (wave_number * 10)
        self.max_health = self.health
        self.speed = 1.0 + (wave_number * 0.05)
        self.reward = 25 + (wave_number * 5)


class RunnerEnemy(Enemy):
    """Fast enemy with low health"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        super().__init__(enemy_id, wave_number)
        self.type = "runner"
        self.health = 30 + (wave_number * 8)
        self.max_health = self.health
        self.speed = 2.0 + (wave_number * 0.1)
        self.reward = 30 + (wave_number * 5)


class TankEnemy(Enemy):
    """Slow enemy with high health and armor"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        super().__init__(enemy_id, wave_number)
        self.type = "tank"
        self.health = 150 + (wave_number * 20)
        self.max_health = self.health
        self.speed = 0.5 + (wave_number * 0.02)
        self.reward = 50 + (wave_number * 10)
        self.armor = 3 + (wave_number // 2)


class FlyingEnemy(Enemy):
    """Flying enemy that can't be hit by some towers"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        super().__init__(enemy_id, wave_number)
        self.type = "flying"
        self.health = 40 + (wave_number * 8)
        self.max_health = self.health
        self.speed = 1.5 + (wave_number * 0.08)
        self.reward = 35 + (wave_number * 6)
        self.flying = True
        self.y = 200  # Flies higher


class BossEnemy(Enemy):
    """Powerful boss enemy"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        super().__init__(enemy_id, wave_number)
        self.type = "boss"
        self.health = 300 + (wave_number * 50)
        self.max_health = self.health
        self.speed = 0.7 + (wave_number * 0.03)
        self.reward = 100 + (wave_number * 20)
        self.armor = 5 + wave_number


class HealerEnemy(Enemy):
    """Enemy that heals nearby enemies"""
    
    def __init__(self, enemy_id: int, wave_number: int):
        super().__init__(enemy_id, wave_number)
        self.type = "healer"
        self.health = 60 + (wave_number * 12)
        self.max_health = self.health
        self.speed = 0.8 + (wave_number * 0.04)
        self.reward = 40 + (wave_number * 8)
        self.heal_amount = 5
        self.heal_range = 80


# Enemy factory
ENEMY_TYPES = {
    "basic": BasicEnemy,
    "runner": RunnerEnemy,
    "tank": TankEnemy,
    "flying": FlyingEnemy,
    "boss": BossEnemy,
    "healer": HealerEnemy,
}


def create_enemy(enemy_type: str, enemy_id: int, wave_number: int) -> Enemy:
    """Factory function to create enemies"""
    enemy_class = ENEMY_TYPES.get(enemy_type, BasicEnemy)
    return enemy_class(enemy_id, wave_number)


def get_wave_composition(wave_number: int) -> list:
    """Determine enemy composition for a wave"""
    composition = []
    base_count = 5 + wave_number
    
    # Basic enemies in every wave
    for _ in range(base_count):
        composition.append("basic")
    
    # Add runners starting wave 2
    if wave_number >= 2:
        for _ in range(wave_number // 2):
            composition.append("runner")
    
    # Add tanks starting wave 3
    if wave_number >= 3:
        for _ in range(wave_number // 3):
            composition.append("tank")
    
    # Add flying enemies starting wave 4
    if wave_number >= 4:
        for _ in range(wave_number // 4):
            composition.append("flying")
    
    # Add healers starting wave 5
    if wave_number >= 5 and wave_number % 2 == 0:
        composition.append("healer")
    
    # Boss every 5 waves
    if wave_number % 5 == 0:
        composition.append("boss")
    
    return composition
